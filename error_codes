/* Error Codes
Log onto Mode Analytics and from the home page, create a new report by clicking on the green plus sign button in the upper right-hand corner. Enter the starter code when provided for each exercise. You may want to create a new tab for each exercise. Please use the discussion forum for any questions and/or comments you might have. Once you have tried the exercises, feel free to watch the solutions video. Good luck with your practice! Note: When querying a table, remember to prepend dsv1069, which is the schema, or folder that contains the course data.

Exercise 1:
Goal: Here we use users table to pull a list of user email addresses. Edit the query to pull email addresses, but only for non-deleted users. */

SELECT email_address
FROM dsv1069.users
WHERE deleted_at IS NULL;

/*Exercise 2:
--Goal: Use the items table to count the number of items for sale in each category*/

SELECT
  category,
  COUNT(id) AS item_count
FROM
  dsv1069.items
GROUP BY
  category
ORDER BY
  item_count DESC;

/*Exercise 3:
--Goal: Select all of the columns from the result when you JOIN the users table to the orders table */

SELECT *
FROM dsv1069.users
JOIN dsv1069.orders
ON id = user_id;

/* Exercise 4:
--Goal: Check out the query below. This is not the right way to count the number of viewed_item
events. Determine what is wrong and correct the error.

Starter Code:
SELECT
COUNT(event_id) AS events
FROM dsv1069.events
WHERE event_name = ‘view_item’ */

SELECT COUNT(*) AS events
FROM dsv1069.events
WHERE event_name LIKE '%view_item%';

/* Exercise 5:
--Goal:Compute the number of items in the items table which have been ordered. The query below runs, but it isn’t right. Determine what is wrong and correct the error or start from scratch.
Starter Code: */

SELECT COUNT(item_id) AS item_count
FROM dsv1069.orders
INNER JOIN dsv109.items ON orders.item_id = items.id

/* It is wrong because when we use this code to find the total number of items, there are only 2,198 items but it is returning much higher number of items. */

SELECT COUNT (*) FROM dsv1069.items
 /* Corretced code */
SELECT COUNT(DISTINCT orders.item_id) AS item_count
FROM dsv1069.orders
JOIN dsv1069.items ON items.id = orders.item_id

/* Exercise 6:
--Goal: For each user figure out IF a user has ordered something, and when their first purchase was. The query below doesn’t return info for any of the users who haven’t ordered anything. */

SELECT users.id AS user_id
	,MIN(orders.paid_at) AS min_paid_at
FROM dsv1069.orders
INNER JOIN dsv1069.users ON orders.user_id = users.id
GROUP BY users.id

/* Corrected code Explanation: This code uses a LEFT JOIN to join the "users" and "orders" tables. This ensures that all rows from the "users" table are included in the result, even if there is no matching row in the "orders" table. The SELECT statement and GROUP BY clause are the same as before. The result will include all users, and for each user, the earliest purchase date (if any). If a user has not made any purchases, the "min_paid_at" column will be NULL. */

SELECT users.id AS user_id
	,MIN(orders.paid_at) AS min_paid_at
FROM dsv1069.orders
INNER JOIN dsv1069.users ON orders.user_id = users.id
GROUP BY users.id

/* Exercise 7:

Goal: Figure out what percent of users have ever viewed the user profile page, but this query isn’t right. Check to make sure the number of users adds up, and if not, fix the query.*/

SELECT (
		CASE 
			WHEN first_view IS NULL
				THEN false
			ELSE true
			END
		) AS has_viewed_profile_page
	,COUNT(user_id) AS users
FROM (
	SELECT users.id AS user_id
		,MIN(event_time) AS first_view
	FROM dsv1069.events ON (events.user_id = users.id)
	WHERE event_name = 'view_user_profile'
	GROUP BY users.id
	) first_profile_views
GROUP BY users.id ) first_profile_views
GROUP BY (
		CASE 
			WHEN first_view IS NULL
				THEN false
			ELSE true
			END
		)

/* Corrected */

SELECT COUNT(DISTINCT user_id) AS viewed_profile_users
	,COUNT(DISTINCT user_id) / COUNT(DISTINCT events.user_id) AS viewed_profile_percent
FROM dsv1069.events
WHERE event_name = 'view_user_profile'
